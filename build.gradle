plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version "${springVersion}"
	id 'io.spring.dependency-management' version '1.1.6'
}

bootJar{
	mainClass = 'co.com.ancas.Main'
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

allprojects {
	repositories {
		mavenLocal()
		mavenCentral()
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'jacoco'
	apply plugin: 'java-library'
	apply plugin: 'org.springframework.boot'
	apply plugin: 'io.spring.dependency-management'

	group = 'co.com.ancas'
	version = '0.0.1-SNAPSHOT'

	compileJava{
		sourceCompatibility = '21'
		targetCompatibility = '21'
	}
	repositories {
		mavenLocal()
		mavenCentral()
	}

	dependencies {
		implementation "org.springframework.boot:spring-boot-starter-security:${springVersion}"
		implementation "org.springframework.boot:spring-boot-starter-web:${springVersion}"
		compileOnly "org.projectlombok:lombok:${lombokVersion}"
		annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
		testImplementation "org.springframework.boot:spring-boot-starter-test:${springVersion}"
		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
		implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springVersion}"
		runtimeOnly "org.flywaydb:flyway-database-postgresql:${flywayVersion}"
		implementation "org.springframework.security:spring-security-messaging:${securityMessaging}"
		implementation "org.springframework.boot:spring-boot-starter-websocket:${springVersion}"
		implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server:${springVersion}"
		implementation "org.springframework.boot:spring-boot-starter-validation:${springVersion}"
		testImplementation "org.springframework.security:spring-security-test:${securityMessaging}"
		implementation "org.springframework.security:spring-security-core:${securityMessaging}"


	}

	test.finalizedBy(project.tasks.jacocoTestReport)

	jacocoTestReport {
		reports {
			xml.required = true
			html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
		}
	}

	sourceSets {
		main{
			java {
				srcDirs = ['src/main/java']
			}
			resources {
				srcDirs = ['src/main/resources']
			}
		}
		test {
			java {
				srcDirs = ['src/test/java']
			}
			resources {
				srcDirs = ['src/test/resources']
			}
		}
	}

	test{
		useJUnitPlatform()
	}

}

jacoco {
	toolVersion = jacocoVersion
	reportsDirectory = layout.buildDirectory.dir("reports/jacoco").get().asFile
}
task jacocoMergedReport(type: JacocoReport) {
	dependsOn = subprojects.jacocoTestReport
	additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
	sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
	classDirectories.setFrom files(subprojects.sourceSets.main.output)
	executionData.setFrom project.fileTree(dir: '.', include: '**/build/jacoco/test.exec')
}

tasks.withType(JavaCompile) {
	options.compilerArgs = [
			'-Amapstruct.suppressGeneratorTimestamp=true'
	]
}

